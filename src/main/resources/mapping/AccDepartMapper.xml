<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.acc.dao.AccDepartMapper">

	<resultMap id="accDepart" type="com.acc.model.AccDepart">
        <result property="id" column="ID"/>
        <result property="itemname" column="ITEMNAME"/>
        <result property="isdelete" column="ISDELETE"/>
        <result property="depId" column="DEP_ID"/>
        <result property="parentdepId" column="PARENT_DEP_ID"/>
        
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		ID,ITEMNAME,ISDELETE,DEP_ID,PARENT_DEP_ID
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO ACC_DEPART (
        	ID ,
        	ITEMNAME ,
        	ISDELETE ,
        	DEP_ID ,
        	PARENT_DEP_ID
        ) VALUES (
        	#{id} ,
        	#{itemname} ,
        	#{isdelete} ,
        	#{depId} ,
        	#{parentdepId} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE ACC_DEPART SET
	        ITEMNAME = #{itemname} ,
	        ISDELETE = #{isdelete} ,
	        DEP_ID = #{depId} ,
	        PARENT_DEP_ID = #{parentdepId} 
        WHERE 
	        ID = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM ACC_DEPART WHERE
        ID = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="accDepart">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM ACC_DEPART 
	        WHERE 
		        ID = #{id} 
	    ]]>
	</select>
	
	<sql id="findWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(itemname)">
				AND ITEMNAME = #{itemname}
			</if>
	       <if test="@Ognl@isNotEmpty(isdelete)">
				AND ISDELETE = #{isdelete}
			</if>
	       <if test="@Ognl@isNotEmpty(depId)">
				AND DEP_ID = #{depId}
			</if>
		</where>
	</sql>
		
    <select id="findCount" resultType="long">
        SELECT count(*) FROM ACC_DEPART 
		<include refid="findWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="accDepart">
    	SELECT <include refid="columns" />
	    FROM ACC_DEPART 
		<include refid="findWhere"/>
    </select>

	<select id="getDepartAll" resultMap="accDepart">
    	SELECT <include refid="columns" />
	    FROM ACC_DEPART 
	    WHERE ISDELETE=0
	    order by DEP_ID
    </select>
    <select id="getDepartParent" resultMap="accDepart">
    	SELECT <include refid="columns" />
	    FROM ACC_DEPART 
	    WHERE ISDELETE=0
	    and DEP_ID like '__'
    </select>
    <select id="selectChildren" resultMap="accDepart">
    	SELECT <include refid="columns" />
	    FROM ACC_DEPART 
	    WHERE ISDELETE=0
	    and DEP_ID like CONCAT(#{depId},'%')
	    and DEP_ID != #{depId}
    </select>
</mapper>